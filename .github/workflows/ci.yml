
name: frontend-ci
on:
  push:
    branches: [ "develop", "main" ]

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/sky-frontend
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with: { node-version: "20", cache: "npm" }

      - run: npm ci
      - run: npm run lint
      - run: npm run test -- --watch=false --browsers=ChromeHeadless

      # Contract check: lade OpenAPI vom letzten Backend-Artifact (einfacher Weg)
      - name: Download OpenAPI (from backend artifact)
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          repo: yourorg/sky-backend
          name: openapi
          path: ./schemas
          if_no_artifact_found: ignore

      - name: Generate API types (fail if schema incompatible)
        run: |
          if [ -f ./schemas/openapi.json ]; then
            npx openapi-typescript ./schemas/openapi.json -o src/app/api-types.d.ts
          else
            echo "No openapi.json found â€“ skipping strict contract check"
          fi

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

      - name: Deploy DEV (only on develop)
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p ~/sky-infra
            
            if [ "${{ github.ref_name }}" == "develop" ]; then
              # Create .env.dev file for develop branch
              echo "CERT_EMAIL=${{ secrets.CERT_EMAIL }}" > ~/sky-infra/.env.dev
              echo "OWNER_GITHUB=${{ secrets.OWNER_GITHUB }}" >> ~/sky-infra/.env.dev
              echo "DEV_APP_HOST=${{ secrets.DEV_APP_HOST }}" >> ~/sky-infra/.env.dev
              echo "DEV_API_HOST=${{ secrets.DEV_API_HOST }}" >> ~/sky-infra/.env.dev
              echo "DEV_SHOP_HOST=${{ secrets.DEV_SHOP_HOST }}" >> ~/sky-infra/.env.dev
              echo "DEV_FRONTEND_TAG=${{ env.TAG }}" >> ~/sky-infra/.env.dev # Frontend-Tag kommt aus env.TAG des Workflows
              echo "DEV_BACKEND_TAG=${{ secrets.DEV_BACKEND_TAG }}" >> ~/sky-infra/.env.dev
              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY_DEV }}" >> ~/sky-infra/.env.dev
              echo "PG_USER=${{ secrets.PG_USER }}" >> ~/sky-infra/.env.dev
              echo "PG_DB=skylad_dev" >> ~/sky-infra/.env.dev
              echo "PG_PASSWORD=${{ secrets.PG_PASSWORD_DEV }}" >> ~/sky-infra/.env.dev
              echo "MARIADB_USER=${{ secrets.MARIADB_USER }}" >> ~/sky-infra/.env.dev
              echo "MARIADB_DB=skylad_dev_mariadb" >> ~/sky-infra/.env.dev
              echo "MARIADB_ROOT_PASSWORD=${{ secrets.MARIADB_ROOT_PASSWORD_DEV }}" >> ~/sky-infra/.env.dev
              echo "MARIADB_PASSWORD=${{ secrets.MARIADB_PASSWORD_DEV }}" >> ~/sky-infra/.env.dev
              
              cd ~/sky-infra
              docker compose -f compose.dev.yml --env-file .env.dev pull dev-frontend
              docker compose -f compose.dev.yml --env-file .env.dev up -d dev-frontend
            
            elif [ "${{ github.ref_name }}" == "main" ]; then
              # Create .env.prod file for main branch
              echo "CERT_EMAIL=${{ secrets.CERT_EMAIL }}" > ~/sky-infra/.env.prod
              echo "OWNER_GITHUB=${{ secrets.OWNER_GITHUB }}" >> ~/sky-infra/.env.prod
              echo "PROD_APP_HOST=${{ secrets.PROD_APP_HOST }}" >> ~/sky-infra/.env.prod
              echo "PROD_API_HOST=${{ secrets.PROD_API_HOST }}" >> ~/sky-infra/.env.prod
              echo "PROD_SHOP_HOST=${{ secrets.PROD_SHOP_HOST }}" >> ~/sky-infra/.env.prod
              echo "PROD_FRONTEND_TAG=${{ secrets.PROD_FRONTEND_TAG }}" >> ~/sky-infra/.env.prod
              echo "PROD_BACKEND_TAG=${{ secrets.PROD_BACKEND_TAG }}" >> ~/sky-infra/.env.prod
              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY_PROD }}" >> ~/sky-infra/.env.prod
              echo "PG_USER=${{ secrets.PG_USER }}" >> ~/sky-infra/.env.prod
              echo "PG_DB=skylad_prod" >> ~/sky-infra/.env.prod
              echo "PG_PASSWORD=${{ secrets.PG_PASSWORD_PROD }}" >> ~/sky-infra/.env.prod
              echo "MARIADB_USER=${{ secrets.MARIADB_USER }}" >> ~/sky-infra/.env.prod
              echo "MARIADB_DB=skylad_prod_mariadb" >> ~/sky-infra/.env.prod
              echo "MARIADB_ROOT_PASSWORD=${{ secrets.MARIADB_ROOT_PASSWORD_PROD }}" >> ~/sky-infra/.env.prod
              echo "MARIADB_PASSWORD=${{ secrets.MARIADB_PASSWORD_PROD }}" >> ~/sky-infra/.env.prod
              
              cd ~/sky-infra
              docker compose -f compose.prod.yml --env-file .env.prod pull dev-frontend
              docker compose -f compose.prod.yml --env-file .env.prod up -d dev-frontend
            fi

  e2e:
    needs: test-build-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Playwright
        uses: microsoft/playwright-github-action@v1
      - name: Run smoke E2E vs dev
        env:
          BASE_URL: https://dev.app.skylad.de
        run: npm run e2e:smoke
